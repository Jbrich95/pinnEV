% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bGEV_NN.R
\name{bGEV.NN}
\alias{bGEV.NN}
\alias{bGEV.NN.train}
\alias{bGEV.NN.predict}
\title{blended-GEV PINN}
\usage{
bGEV.NN.train(Y.train, Y.valid = NULL, X.q, X.s, type = "MLP",
  link.loc = "identity", n.ep = 100, batch.size = 100, init.loc = NULL,
  init.spread = NULL, init.xi = NULL, widths = c(6, 3), seed = NULL,
  init.wb_path = NULL, alpha = 0.5, beta = 0.5, p_a = 0.05,
  p_b = 0.2, c1 = 5, c2 = 5)

bGEV.NN.predict(X.q, X.s, model)
}
\arguments{
\item{Y.train, Y.valid}{a 2 or 3 dimensional array of training or validation real response values.
Missing values can be handled by setting corresponding entries to \code{Y.train} or \code{Y.valid} to \code{-1e10}.
The first dimension should be the observation indices, e.g., time.

If \code{type=="CNN"}, then \code{Y.train} and \code{Y.valid} must have three dimensions with the latter two corresponding to an \eqn{M} by \eqn{N} regular grid of spatial locations.
If \code{Y.valid==NULL}, no validation loss will be computed and the returned model will be that which minimises the training loss over \code{n.ep} epochs.}

\item{X.q}{list of arrays corresponding to complementary subsets of the \eqn{d\geq 1} predictors which are used for modelling the location parameter \eqn{q_\alpha}. Must contain at least one of the following three named entries:\describe{
\item{\code{X.lin.q}}{A 3 or 4 dimensional array of "linear" predictor values. One more dimension than \code{Y.train}. If \code{NULL}, a model without the linear component is built and trained.
The first 2/3 dimensions should be equal to that of \code{Y.train}; the last dimension corresponds to the chosen \eqn{l_1\geq 0} 'linear' predictor values.}
\item{\code{X.add.basis.q}}{A 4 or 5 dimensional array of basis function evaluations for the "additive" predictor values.
The first 2/3 dimensions should be equal to that of \code{Y.train}; the penultimate dimensions corresponds to the chosen \eqn{a_1\geq 0} 'linear' predictor values and the last dimension is equal to the number of knots used for estimating the splines. See example.
If \code{NULL}, a model without the additive component is built and trained.}
\item{\code{X.nn.q}}{A 3 or 4 dimensional array of "non-additive" predictor values.  If \code{NULL}, a model without the NN component is built and trained; if this is the case, then \code{type} has no effect.
The first 2/3 dimensions should be equal to that of \code{Y.train}; the last dimension corresponds to the chosen \eqn{d-l_1-a_1\geq 0} 'non-additive' predictor values.}
}
Note that \code{X.q} and \code{X.s} are the predictors for both \code{Y.train} and \code{Y.valid}. If \code{is.null(X.q)}, then \eqn{q_\alpha} will be treated as fixed over the predictors.}

\item{X.s}{similarly to \code{X.q}, but for modelling the scale parameter \eqn{s_\beta>0}. Note that we require at least one of \code{!is.null(X.q)} or \code{!is.null(X.s)}, otherwise the formulated model will be fully stationary and will not be fitted.}

\item{type}{string defining the type of network to be built. If \code{type=="MLP"}, the network will have all densely connected layers; if \code{type=="CNN"},
the network will have all convolutional layers (with 3 by 3 filters). Defaults to an MLP. (Currently the same network is used for all parameters, may change in future versions)}

\item{n.ep}{number of epochs used for training. Defaults to 1000.}

\item{batch.size}{batch size for stochastic gradient descent. If larger than \code{dim(Y.train)[1]}, i.e., the number of observations, then regular gradient descent used.}

\item{init.loc, init.spread, init.xi}{sets the initial \eqn{q_\alpha,s_\beta} and \eqn{\xi\in(0,1)} estimates across all dimensions of \code{Y.train}. Overridden by \code{init.wb_path} if \code{!is.null(init.wb_path)}, but otherwise the initial parameters must be supplied.}

\item{widths}{vector of widths/filters for hidden dense/convolution layers. Number of layers is equal to \code{length(widths)}. Defaults to (6,3).}

\item{seed}{seed for random initial weights and biases.}

\item{init.wb_path}{filepath to a \code{keras} model which is then used as initial weights and biases for training the new model. The original model must have
the exact same architecture and trained with the same input data as the new model. If \code{NULL}, then initial weights and biases are random (with seed \code{seed}) but the
final layer has zero initial weights to ensure that the initial location, spread and shape estimates are \code{init.loc, init.spread} and \code{init.xi}, respectively,  across all dimensions.}

\item{alpha, beta, p_a, p_b}{hyper-parameters associated with the bGEV distribution. Defaults to those used by Castro-Camilo, D., et al. (2021). Require \code{alpha >= p_b} and \code{beta/2 >= p_b}.}

\item{model}{fitted \code{keras} model. Output from \code{bGEVPP.NN.train}.}

\item{loc.link}{string defining the link function used for the location parameter, see \eqn{h_1} below. If \code{link=="exp"}, then \eqn{h_1=\exp(x)}; if \code{link=="identity"}, then \eqn{h_1(x)=x}.}
}
\value{
\code{bGEV.NN.train} returns the fitted \code{model}.  \code{bGEV.NN.predict} is a wrapper for \code{keras::predict} that returns the predicted parameter estimates, and, if applicable, their corresponding linear regression coefficients and spline bases weights.
}
\description{
Build and train a partially-interpretable neural network for fitting a bGEV model
}
\details{
{
Consider a real-valued random variable \eqn{Y} and let \eqn{\mathbf{X}} denote a \eqn{d}-dimensional predictor set with observations \eqn{\mathbf{x}}.
For \eqn{i=1,2}, we define integers \eqn{l_i\geq 0,a_i \geq 0} and \eqn{0\leq l_i+a_i \leq d}, and let \eqn{\mathbf{X}^{(i)}_L, \mathbf{X}^{(i)}_A} and \eqn{\mathbf{X}^{(i)}_N} be distinct sub-vectors
of \eqn{\mathbf{X}}, with observations of each component denoted \eqn{\mathbf{x}^{(i)}_L, \mathbf{x}^{(i)}_A} and \eqn{\mathbf{x}^{(i)}_N}, respectively; the lengths of the sub-vectors are \eqn{l_i,a_i} and \eqn{d_i-l_i-a}, respectively.
For a fixed threshold \eqn{u(\mathbf{x})}, dependent on predictors, we model \eqn{Y|\mathbf{X}=\mathbf{x}\sim\mbox{bGEV}(q_\alpha(\mathbf{x}),s_\beta(\mathbf{x}),\xi)} for \eqn{\xi\in(0,1)} with
\deqn{q_\alpha (\mathbf{x})=h_1\{\eta^{(1)}_0+m^{(1)}_L(\mathbf{x}^{(1)}_L)+m^{(1)}_A(x^{(1)}_A)+m^{(1)}_N(\mathbf{x}^{(1)}_N)\}} and
\deqn{s_\beta (\mathbf{x})=\exp\{\eta^{(2)}_0+m^{(2)}_L(\mathbf{x}^{(2)}_L)+m^{(2)}_A(x^{(2)}_A)+m^{(2)}_N(\mathbf{x}^{(2)}_N)\}}
where \eqn{h_1} is some link-function and \eqn{\eta^{(1)}_0,\eta^{(2)}_0} are constant intercepts. The unknown functions \eqn{m^{(1)}_L,m^{(2)}_L} and
\eqn{m^{(1)}_A,m^{(2)}_A} are estimated using linear functions and splines, respectively, and are
both returned as outputs by \code{bGEV.NN.predict}; \eqn{m^{(1)}_N,m^{(2)}_N} are estimated using neural networks
(currently the same architecture is used for both parameters). Note that \eqn{\xi>0} is fixed across all predictors; this may change in future versions.

For details of the bGEV distribution, see \code{help(pbGEV)}.

The model is fitted by minimising the negative log-likelihood associated with the bGEV model; training is performed over \code{n.ep} training epochs.
Although the model is trained by minimising the loss evaluated for \code{Y.train}, the final returned model may minimise some other loss.
The current state of the model is saved after each epoch, using \code{keras::callback_model_checkpoint}, if the value of some criterion subcedes that of the model from the previous checkpoint; this criterion is the loss evaluated for validation set \code{Y.valid} if \code{!is.null(Y.valid)} and for \code{Y.train}, otherwise.

}
}
\examples{

# Build and train a simple MLP for toy data

set.seed(1)

# Create  predictors
preds<-rnorm(prod(c(200,10,10,8)))

#Re-shape to a 4d array. First dimension corresponds to observations,
#last to the different components of the predictor set.
#Other dimensions correspond to indices of predictors, e.g., a grid of locations.
dim(preds)=c(200,10,10,8) 
#We have 200 observations of eight predictors on a 10 by 10 grid.

#Split predictors into linear, additive and nn. Different for the location and scale parameters.
X.nn.q=preds[,,,1:4] #Four nn predictors for q_\alpha
X.lin.q=preds[,,,5:6] #Two additive predictors for q_\alpha
X.add.q=preds[,,,7:8] #Two additive predictors for q_\alpha

X.nn.s=preds[,,,1:2] #Two nn predictors for s_\beta
X.lin.s=preds[,,,3] #One linear predictor for s_\beta
dim(X.lin.s)=c(dim(X.lin.s),1) #Change dimension so consistent
X.add.s=preds[,,,4] #One additive predictor for s_\beta
dim(X.add.s)=c(dim(X.add.s),1) #Change dimension so consistent


# Create toy response data

#Contribution to location parameter
#Linear contribution
m_L_1 = 0.3*X.lin.q[,,,1]+0.6*X.lin.q[,,,2]

# Additive contribution
m_A_1 = 0.1*X.add.q[,,,1]^3+0.2*X.add.q[,,,1]-
 0.1*X.add.q[,,,2]^3+0.5*X.add.q[,,,2]^2

#Non-additive contribution - to be estimated by NN
m_N_1 = 0.5*exp(-3+X.nn.q[,,,4]+X.nn.q[,,,1])+
 sin(X.nn.q[,,,1]-X.nn.q[,,,2])*(X.nn.q[,,,4]+X.nn.q[,,,2])-
 cos(X.nn.q[,,,4]-X.nn.q[,,,1])*(X.nn.q[,,,3]+X.nn.q[,,,1])

q_alpha=1+m_L_1+m_A_1+m_N_1 #Identity link

#Contribution to scale parameter
#Linear contribution
m_L_2 = 0.5*X.lin.s[,,,1]

# Additive contribution
m_A_2 = 0.1*X.add.s[,,,1]^2+0.2*X.add.s[,,,1]

#Non-additive contribution - to be estimated by NN
m_N_2 = 0.2*exp(-4+X.nn.s[,,,2]+X.nn.s[,,,1])+
 sin(X.nn.s[,,,1]-X.nn.s[,,,2])*(X.nn.s[,,,1]+X.nn.s[,,,2])

s_beta=0.2*exp(m_L_2+m_A_2+m_N_2) #Exponential link

xi=0.1 # Set xi

theta=array(dim=c(dim(s_beta),3))
theta[,,,1]=q_alpha; theta[,,,2] = s_beta; theta[,,,3]=xi
#We simulate data from the bGEV distribution

Y=apply(theta,1:3,function(x) rbGEV(1,q_alpha=x[1],s_beta=x[2],xi=x[3]))

#Create training and validation, respectively.
#We mask 20\% of the Y values and use this for validation
#Masked values must be set to -1e10 and are treated as missing whilst training

mask_inds=sample(1:length(Y),size=length(Y)*0.8)

Y.train<-Y.valid<-Y #Create training and validation, respectively.
Y.train[-mask_inds]=-1e10
Y.valid[mask_inds]=-1e10



#To build a model with an additive component, we require an array of evaluations of
#the basis functions for each pre-specified knot and entry to X.add.q and X.add.s

rad=function(x,c){ #Define a basis function. Here we use the radial bases
  out=abs(x-c)^2*log(abs(x-c))
  out[(x-c)==0]=0
 return(out)
}

n.knot.q = 5; n.knot.s = 4 # set number of knots.
#Must be the same for each additive predictor,
#but can differ between the parameters q_\alpha and s_\beta

#Get knots for q_\alpha predictors
knots.q=matrix(nrow=dim(X.add.q)[4],ncol=n.knot.q)

#We set knots to be equally-spaced marginal quantiles
for( i in 1:dim(X.add.q)[4]){
knots.q[i,]=quantile(X.add.q[,,,i],probs=seq(0,1,length=n.knot.q))
}
#Evaluate radial basis functions for q_\alpha predictors
X.add.basis.q<-array(dim=c(dim(X.add.q),n.knot.q))
for( i in 1:dim(X.add.q)[4]) {
  for(k in 1:n.knot.q) {
    X.add.basis.q[,,,i,k]= rad(x=X.add.q[,,,i],c=knots.q[i,k])
    #Evaluate rad at all entries to X.add.q and for all knots
  }}
  

#Get knots for s_\beta predictor
knots.s=matrix(nrow=dim(X.add.s)[4],ncol=n.knot.s)
for( i in 1:dim(X.add.s)[4]){
 knots.s[i,]=quantile(X.add.s[,,,i],probs=seq(0,1,length=n.knot.s))
}

#Evaluate radial basis functions for s_\beta predictor
X.add.basis.s<-array(dim=c(dim(X.add.s),n.knot.s))
for( i in 1:dim(X.add.s)[4]) {
  for(k in 1:n.knot.s) {
    X.add.basis.s[,,,i,k]= rad(x=X.add.s[,,,i],c=knots.s[i,k])
    #Evaluate rad at all entries to X.add.q and for all knots
  }}



#lin+GAM+NN models defined for both location and scale parameters
X.q=list("X.nn.q"=X.nn.q, "X.lin.q"=X.lin.q,
               "X.add.basis.q"=X.add.basis.q) #Predictors for q_\alpha
X.s=list("X.nn.s"=X.nn.s, "X.lin.s"=X.lin.s,
               "X.add.basis.s"=X.add.basis.s) #Predictors for s_\beta


#Fit the bGEV model. Note that training is not run to completion.
NN.fit<-bGEV.NN.train(Y.train, Y.valid,X.q,X.s, type="MLP",link.loc="identity",
                       n.ep=500, batch.size=50,init.loc=2, init.spread=5,init.xi=0.1,
                       widths=c(6,3),seed=1)
out<-bGEV.NN.predict(X.q=X.q,X.s=X.s,NN.fit$model)

print("q_alpha linear coefficients: "); print(round(out$lin.coeff_q,2))
print("s_beta linear coefficients: "); print(round(out$lin.coeff_s,2))

# Note that this is a simple example that can be run in a personal computer. 
# Whilst the q_alpha functions are well estimated, more data/larger n.ep are required for more accurate
# estimation of s_beta functions and xi

#To save model, run
#NN.fit$model \%>\% save_model_tf("model_bGEV")
#To load model, run
# model  <- load_model_tf("model_bGEV",
#  custom_objects=list(
#    "bgev_loss_alpha__beta__p_a__p_b__c1__c2_"=
#        bgev_loss())
#        )

#Note that bGEV_loss() can take custom alpha,beta, p_a and p_b arguments if defaults not used


# Plot splines for the additive predictors

#Location predictors
n.add.preds_q=dim(X.add.q)[length(dim(X.add.q))]
par(mfrow=c(1,n.add.preds_q))
for(i in 1:n.add.preds_q){
  plt.x=seq(from=min(knots.q[i,]),to=max(knots.q[i,]),length=1000)  #Create sequence for x-axis

  tmp=matrix(nrow=length(plt.x),ncol=n.knot.q)
  for(j in 1:n.knot.q){
    tmp[,j]=rad(plt.x,knots.q[i,j]) #Evaluate radial basis function of plt.x and all knots
  }
  plt.y=tmp\%*\%out$gam.weights_q[i,]
  plot(plt.x,plt.y,type="l",main=paste0("q_alpha spline: predictor ",i),xlab="x",ylab="f(x)")
  points(knots.q[i,],rep(mean(plt.y),n.knot.q),col="red",pch=2)
  #Adds red triangles that denote knot locations

}

#Spread predictors
n.add.preds_s=dim(X.add.s)[length(dim(X.add.s))]
par(mfrow=c(1,n.add.preds_s))
for(i in 1:n.add.preds_s){
  plt.x=seq(from=min(knots.s[i,]),to=max(knots.s[i,]),length=1000)  #Create sequence for x-axis

  tmp=matrix(nrow=length(plt.x),ncol=n.knot.s)
  for(j in 1:n.knot.s){
    tmp[,j]=rad(plt.x,knots.s[i,j]) #Evaluate radial basis function of plt.x and all knots
  }
  plt.y=tmp\%*\%out$gam.weights_s[i,]
  plot(plt.x,plt.y,type="l",main=paste0("s_beta spline: predictor ",i),xlab="x",ylab="f(x)")
  points(knots.s[i,],rep(mean(plt.y),n.knot.s),col="red",pch=2)
  #Adds red triangles that denote knot locations

}

}
\references{
{
Castro-Camilo, D., Huser, R., and Rue, H. (2021), \emph{Practical strategies for generalized extreme value-based regression models for extremes}, Environmetrics, e274.
(\href{https://doi.org/10.1002/env.2742}{doi})

Richards, J. and Huser, R. (2022), \emph{Regression modelling of spatiotemporal extreme U.S. wildfires via partially-interpretable neural networks}. (\href{https://arxiv.org/abs/2208.07581}{arXiv:2208.07581}).
}
}
